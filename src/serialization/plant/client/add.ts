/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../..";
import { PlantStoreApi } from "@fern-api/plantstore";
import * as core from "../../../core";

export const Request: core.schemas.Schema<serializers.plant.add.Request.Raw, PlantStoreApi.AddPlantRequest> =
  core.schemas.object({
    id: core.schemas.lazy(async () => (await import("../..")).PlantId).optional(),
    category: core.schemas.lazyObject(async () => (await import("../..")).PlantCategory).optional(),
    name: core.schemas.string(),
    photoUrls: core.schemas.record(core.schemas.string(), core.schemas.string()),
    status: core.schemas.lazy(async () => (await import("../..")).PlantStatus).optional(),
  });

export declare namespace Request {
  interface Raw {
    id?: serializers.PlantId.Raw | null;
    category?: serializers.PlantCategory.Raw | null;
    name: string;
    photoUrls: Record<string, string>;
    status?: serializers.PlantStatus.Raw | null;
  }
}

export const Error: core.schemas.Schema<serializers.plant.add.Error.Raw, PlantStoreApi.plant.add.Error> = core.schemas
  .union("error", {
    InvalidResponseError: core.schemas.object({}),
  })
  .transform<PlantStoreApi.plant.add.Error>({
    parse: (value) => {
      switch (value.error) {
        case "InvalidResponseError":
          return PlantStoreApi.plant.add.Error.invalidResponseError();
      }
    },
    json: (value) => value as any,
  });

export declare namespace Error {
  type Raw = Error.InvalidResponseError;

  interface InvalidResponseError {
    error: "InvalidResponseError";
  }
}
