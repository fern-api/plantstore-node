/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../..";
import { PlantStoreApi } from "@fern-api/plantstore";
import * as core from "../../../core";

export const Response: core.schemas.Schema<serializers.plant.find.Response.Raw, PlantStoreApi.Plant> =
  core.schemas.lazyObject(async () => (await import("../..")).Plant);

export declare namespace Response {
  type Raw = serializers.Plant.Raw;
}

export const Error: core.schemas.Schema<serializers.plant.find.Error.Raw, PlantStoreApi.plant.find.Error> = core.schemas
  .union("error", {
    PlantNotFoundError: core.schemas.object({}),
    InvalidIdSuppliedError: core.schemas.object({}),
  })
  .transform<PlantStoreApi.plant.find.Error>({
    parse: (value) => {
      switch (value.error) {
        case "PlantNotFoundError":
          return PlantStoreApi.plant.find.Error.plantNotFoundError();
        case "InvalidIdSuppliedError":
          return PlantStoreApi.plant.find.Error.invalidIdSuppliedError();
      }
    },
    json: (value) => value as any,
  });

export declare namespace Error {
  type Raw = Error.PlantNotFoundError | Error.InvalidIdSuppliedError;

  interface PlantNotFoundError {
    error: "PlantNotFoundError";
  }

  interface InvalidIdSuppliedError {
    error: "InvalidIdSuppliedError";
  }
}
