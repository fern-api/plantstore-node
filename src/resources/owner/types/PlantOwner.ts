/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { PlantstoreApi } from "@fern-api/plantstore";
import * as core from "../../../core";

export type PlantOwner =
  | PlantstoreApi.PlantOwner.Customer
  | PlantstoreApi.PlantOwner.Employee
  | PlantstoreApi.PlantOwner._Unknown;

export declare namespace PlantOwner {
  interface Customer extends PlantstoreApi.StoreCustomer, _Utils {
    type: "customer";
  }

  interface Employee extends PlantstoreApi.StoreEmployee, _Utils {
    type: "employee";
  }

  interface _Unknown extends _Utils {
    type: void;
  }

  interface _Utils {
    _visit: <_Result>(visitor: PlantstoreApi.PlantOwner._Visitor<_Result>) => _Result;
  }

  interface _Visitor<_Result> {
    customer: (value: PlantstoreApi.StoreCustomer) => _Result;
    employee: (value: PlantstoreApi.StoreEmployee) => _Result;
    _other: (value: { type: string }) => _Result;
  }
}

export const PlantOwner = {
  customer: (value: PlantstoreApi.StoreCustomer): PlantstoreApi.PlantOwner.Customer => {
    const valueWithoutVisit: Omit<PlantstoreApi.PlantOwner.Customer, "_visit"> = {
      ...value,
      type: "customer",
    };
    return core.addNonEnumerableProperty(valueWithoutVisit, "_visit", function <
      _Result
    >(this: PlantstoreApi.PlantOwner.Customer, visitor: PlantstoreApi.PlantOwner._Visitor<_Result>) {
      return PlantstoreApi.PlantOwner._visit(this, visitor);
    });
  },

  employee: (value: PlantstoreApi.StoreEmployee): PlantstoreApi.PlantOwner.Employee => {
    const valueWithoutVisit: Omit<PlantstoreApi.PlantOwner.Employee, "_visit"> = {
      ...value,
      type: "employee",
    };
    return core.addNonEnumerableProperty(valueWithoutVisit, "_visit", function <
      _Result
    >(this: PlantstoreApi.PlantOwner.Employee, visitor: PlantstoreApi.PlantOwner._Visitor<_Result>) {
      return PlantstoreApi.PlantOwner._visit(this, visitor);
    });
  },

  _unknown: (value: { type: string }): PlantstoreApi.PlantOwner._Unknown => {
    const valueWithoutVisit = value as unknown as Omit<PlantstoreApi.PlantOwner._Unknown, "_visit">;
    return core.addNonEnumerableProperty(valueWithoutVisit, "_visit", function <
      _Result
    >(this: PlantstoreApi.PlantOwner._Unknown, visitor: PlantstoreApi.PlantOwner._Visitor<_Result>) {
      return PlantstoreApi.PlantOwner._visit(this, visitor);
    });
  },

  _visit: <_Result>(value: PlantstoreApi.PlantOwner, visitor: PlantstoreApi.PlantOwner._Visitor<_Result>): _Result => {
    switch (value.type) {
      case "customer":
        return visitor.customer(value);
      case "employee":
        return visitor.employee(value);
      default:
        return visitor._other(value as any);
    }
  },
} as const;
