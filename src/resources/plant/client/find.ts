/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { PlantStoreApi } from "@fern-api/plantstore";
import * as core from "../../../core";

export type Response = core.APIResponse<PlantStoreApi.Plant, PlantStoreApi.plant.find.Error>;
export type Error =
  | PlantStoreApi.plant.find.Error.PlantNotFoundError
  | PlantStoreApi.plant.find.Error.InvalidIdSuppliedError
  | PlantStoreApi.plant.find.Error._Unknown;

export declare namespace Error {
  interface PlantNotFoundError extends _Utils {
    statusCode: 404;
  }

  interface InvalidIdSuppliedError extends _Utils {
    statusCode: 400;
  }

  interface _Unknown extends _Utils {
    statusCode: void;
    content: core.Fetcher.Error;
  }

  interface _Utils {
    _visit: <_Result>(visitor: PlantStoreApi.plant.find.Error._Visitor<_Result>) => _Result;
  }

  interface _Visitor<_Result> {
    plantNotFoundError: () => _Result;
    invalidIdSuppliedError: () => _Result;
    _other: (value: core.Fetcher.Error) => _Result;
  }
}

export const Error = {
  plantNotFoundError: (): PlantStoreApi.plant.find.Error.PlantNotFoundError => {
    const valueWithoutVisit: Omit<PlantStoreApi.plant.find.Error.PlantNotFoundError, "_visit"> = {
      statusCode: 404,
    };
    return core.addNonEnumerableProperty(valueWithoutVisit, "_visit", function <
      _Result
    >(this: PlantStoreApi.plant.find.Error.PlantNotFoundError, visitor: PlantStoreApi.plant.find.Error._Visitor<_Result>) {
      return PlantStoreApi.plant.find.Error._visit(this, visitor);
    });
  },

  invalidIdSuppliedError: (): PlantStoreApi.plant.find.Error.InvalidIdSuppliedError => {
    const valueWithoutVisit: Omit<PlantStoreApi.plant.find.Error.InvalidIdSuppliedError, "_visit"> = {
      statusCode: 400,
    };
    return core.addNonEnumerableProperty(valueWithoutVisit, "_visit", function <
      _Result
    >(this: PlantStoreApi.plant.find.Error.InvalidIdSuppliedError, visitor: PlantStoreApi.plant.find.Error._Visitor<_Result>) {
      return PlantStoreApi.plant.find.Error._visit(this, visitor);
    });
  },

  _unknown: (fetcherError: core.Fetcher.Error): PlantStoreApi.plant.find.Error._Unknown => {
    const valueWithoutVisit = fetcherError as unknown as Omit<PlantStoreApi.plant.find.Error._Unknown, "_visit">;
    return core.addNonEnumerableProperty(valueWithoutVisit, "_visit", function <
      _Result
    >(this: PlantStoreApi.plant.find.Error._Unknown, visitor: PlantStoreApi.plant.find.Error._Visitor<_Result>) {
      return PlantStoreApi.plant.find.Error._visit(this, visitor);
    });
  },

  _visit: <_Result>(
    value: PlantStoreApi.plant.find.Error,
    visitor: PlantStoreApi.plant.find.Error._Visitor<_Result>
  ): _Result => {
    switch (value.statusCode) {
      case 404:
        return visitor.plantNotFoundError();
      case 400:
        return visitor.invalidIdSuppliedError();
      default:
        return visitor._other(value as any);
    }
  },
} as const;
